[
	{
  "name": "Cassandra",
  "modelType": "Cassandra",
  "description": {
    "short": "The output of Cassandra use the generic implementation with DataFrames, this implementation transform each UpdateMetricOperation to Row type of Spark and identify each row with his schema.",
    "long": "The output of Cassandra use the generic implementation with DataFrames, this implementation transform each UpdateMetricOperation to Row type of Spark and identify each row with his schema.",
    "learnMore": "http://docs.stratio.com/modules/sparkta/0.6/outputs.html#cassandra-label"
  },
  "icon": {
    "url": "logo_cassandra.png"
  },

  "properties": [
    {
      "propertyId": "connectionHost",
      "propertyName": "ConnectionHost",
      "propertyType": "text",
      "regexp": "((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(((?![0-9]+$)(?!.*-$)(?!-)[a-zA-Z0-9-]{2,63}))",
      "default": "localhost",
      "required": true,
      "tooltip": ""
    },
    {
      "propertyId": "keyspace",
      "propertyName": "Keyspace",
      "propertyType": "text",
      "regexp": "TODO cualquier cadena de caracteres",
      "default": "sparkta",
      "required": true,
      "tooltip": "The name of the KeySpace."
    },
    {
      "propertyId": "keyspaceClass",
      "propertyName": "KeyspaceClass",
      "propertyType": "select",
      "regexp": "SimpleStrategy|NetworkTopologyStrategy",
      "values":[{"label":"SimpleStrategy","value":"SimpleStrategy"},
        {"label":"NetworkTopologyStrategy","value":"NetworkTopologyStrategy"}],
      "default": "SimpleStrategy",
      "required": true,
      "tooltip": "The class of KeySpace."
    },
    {
      "propertyId": "replication_factor",
      "propertyName": "ReplicationFactor",
      "propertyType": "text",
      "regexp": "TODO cualquier número",
      "default": "1",
      "required": false,
      "tooltip": "Specifies the number of replicas of data on multiple nodes.",
      "visible": [
        [{"propertyId": "KeyspaceClass", "value": "SimpleStrategy", "overrideProps" : [
          {"label": "required", "value": true}]
        }]
      ]
    },
    {
      "propertyId": "compactStorage",
      "propertyName": "CompactStorage",
      "propertyType": "text",
      "regexp": "TODO",
      "default": "None",
      "required": false,
      "tooltip": "The compact storage directive is used for backward compatibility of CQL 2 applications and data in the legacy (Thrift) storage engine format. To take advantage of CQL 3 capabilities, do not use this directive in new applications. When you create a table using compound primary keys, for every piece of data stored, he column name needs to be stored along with it. Instead of each non-primary key column being stored such that each column corresponds to one column on disk, an entire row is stored in a single column on disk, hence the name compact storage."
    },
    {
      "propertyId": "clusteringPrecisions",
      "propertyName": "ClusteringPrecisions",
      "propertyType": "text",
      "regexp": "TODO",
      "default": "",
      "required": false,
      "tooltip": "Clustering columns for the primary key."
    },
    {
      "propertyId": "indexFields",
      "propertyName": "IndexFields",
      "propertyType": "text",
      "regexp": "TODO",
      "default": "",
      "required": false,
      "tooltip": "The indexed fields, could be any aggregate field or clustering column field."
    },
    {
      "propertyId": "textIndexFields",
      "propertyName": "TextIndexFields",
      "propertyType": "text",
      "regexp": "TODO",
      "default": "",
      "required": false,
      "tooltip": "The text index fields, this feature is for the Stratio’s Cassandra Lucene Index"
    },
    {
      "propertyId": "analyzer",
      "propertyName": "Analyzer",
      "propertyType": "text",
      "regexp": "TODO",
      "default": "english",
      "required": false,
      "tooltip": "The analyzer for text index fields, this feature is for the Stratio’s Cassandra Lucene Index"
    },
    {
      "propertyId": "refreshSeconds",
      "propertyName": "RefreshSeconds",
      "propertyType": "text",
      "regexp": "TODO",
      "default": "1",
      "required": false,
      "tooltip": "The number of seconds between refresh lucene index operations, this feature is for the Stratio’s Cassandra Lucene Index"
    },
    {
      "propertyId": "dateFormat",
      "propertyName": "DateFormat",
      "propertyType": "text",
      "regexp": "TODO",
      "default": "yyyy/MM/dd",
      "required": false,
      "tooltip": "The date format for the date fields indexed, this feature is for the Stratio’s Cassandra Lucene Index"
    }
  ]
},
{
  "name": "CSV",
  "modelType": "Csv",
  "description": {
    "short": "",
    "long": "",
    "learnMore": "http://docs.stratio.com"
  },
  "icon": {
    "url": "logo_csv.png"
  },
  "properties": [
    {
      "propertyId": "path",
      "propertyName": "Path",
      "propertyType": "text",
      "regexp": "^[a-zA-Z0-9:_\\.\\-\\+/\\\\]{2,}\\.csv$",
      "default": null,
      "required": true
    },
    {
      "propertyId": "header",
      "propertyName": "Header",
      "propertyType": "text",
      "regexp": "",
      "default": false,
      "required": false
    },
    {
      "propertyId": "delimiter",
      "propertyName": "Delimiter",
      "propertyType": "text",
      "regexp": "",
      "default": ",",
      "required": false
    },
    {
      "propertyId": "datePattern",
      "propertyName": "Date pattern",
      "propertyType": "text",
      "regexp": "",
      "default": null,
      "required": false
    },
    {
      "propertyId": "dateGranularityFile",
      "propertyName": "Date granularity file",
      "propertyType": "text",
      "regexp": "",
      "default": "day",
      "required": false
    }
  ]
},
{
  "name": "Elasticsearch",
  "modelType": "ElasticSearch",
  "description": {
    "short": "The output of ElasticSearch use the generic implementation with DataFrames, this implementation transform each UpdateMetricOperation to Row type of Spark and identify each row with his schema.",
    "long": "The output of ElasticSearch use the generic implementation with DataFrames, this implementation transform each UpdateMetricOperation to Row type of Spark and identify each row with his schema.",
    "learnMore": "http://docs.stratio.com/modules/sparkta/0.6/outputs.html#elasticsearch-label"
  },
  "icon": {
    "url": "logo_elasticsearch.png"
  },
  "properties": [
    {
      "propertyId": "nodes",
      "propertyName": "nodes",
      "propertyType": "text",
      "regexp": "",
      "default": "localhost",
      "required": true
    },
    {
      "propertyId": "defaultPort",
      "propertyName": "Port",
      "propertyType": "text",
      "regexp": "(0|([1-9]\\d{0,3}|[1-5]\\d{4}|[6][0-5][0-5]([0-2]\\d|[3][0-5])))",
      "default": 9300,
      "required": false
    },
    {
      "propertyId": "idField",
      "propertyName": "IdField",
      "propertyType": "text",
      "regexp": "[^/\\. \"$]{1,3}",
      "default": null,
      "required": false
    },
    {
      "propertyId": "indexMapping",
      "propertyName": "IndexMapping",
      "propertyType": "text",
      "regexp": "",
      "default": "sparkta",
      "required": false
    }
  ]
},
{
  "name": "MongoDb",
  "modelType": "MongoDb",
  "description": {
    "short": "MongoDB is an open-source document database, and the leading NoSQL database.",
    "long": "MongoDB is an open-source document database that provides high performance, high availability, and automatic scaling.",
    "learnMore": "http://docs.stratio.com/modules/sparkta/0.6/outputs.html#mongodb-label"
  },
  "icon": {
    "url": "logo_mongodb.png"
  },

  "properties": [
    {
      "propertyId": "hosts",
      "propertyName": "Hosts",
      "propertyType": "list",
      "default": "",
      "required": true,
      "tooltip": "This parameter connection routes specified the nodes of a cluster of MongoDB, with different replica set or with sharding.",
      "fields": [
        {
          "propertyId": "hostName",
          "propertyName": "Host",
          "propertyType": "text",
          "regexp": "((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(((?![0-9]+$)(?!.*-$)(?!-)[a-zA-Z0-9-]{2,63}))",
          "default": "",
          "hidden": false,
          "required": true
        },
        {
          "propertyId": "port",
          "propertyName": "Port",
          "propertyType": "number",
          "regexp": "(0|([1-9]\\d{0,3}|[1-5]\\d{4}|[6][0-5][0-5]([0-2]\\d|[3][0-5])))",
          "default": "27017",
          "hidden": false,
          "required": true
        }
      ]
    },
    {
      "propertyId": "dbName",
      "propertyName": "DBName",
      "propertyType": "text",
      "regexp": "TODO cualquier cadena de caracteres",
      "default": "sparkta",
      "required": false,
      "tooltip": "The name of the database"
    },
    {
      "propertyId": "connectionsPerHost",
      "propertyName": "Connections per host",
      "propertyType": "number",
      "regexp": "TODO cualquier numero",
      "default": 5,
      "required": false,
      "tooltip": "Number of connections per host"
    },
    {
      "propertyId": "threadsAllowedToBlock",
      "propertyName": "Threads allowed to block",
      "propertyType": "number",
      "regexp": "TODO cualquier numero",
      "default": 10,
      "required": false,
      "tooltip": "This multiplier, multiplied with the connectionsPerHost setting, gives the maximum number of threads that may be waiting for a connection to become available from the pool."
    },
    {
      "propertyId": "idAsField",
      "propertyName": "Id as field",
      "propertyType": "boolean",
      "regexp": "true|false",
      "default": "false",
      "required": false,
      "tooltip": "Is possible to save all fields that compound the unique key as a independent field."
    },
    {
      "propertyId": "textIndexFields",
      "propertyName": "Text index fields",
      "propertyType": "text",
      "regexp": "TODO cualquier cadena de caracteres separada por comas",
      "default": "",
      "required": false,
      "tooltip": "The system is capable of insert data in a full-text index. All of this fields compound the index."
    },
    {
      "propertyId": "language",
      "propertyName": "Language",
      "propertyType": "text",
      "regexp": "TODO cualquier cadena de caracteres",
      "default": "",
      "required": false,
      "tooltip": "Specify the language of the tokenizer in the full-text index in MongoDB, each document inserted must have this key-value."
    },
    {
      "propertyId": "retrySleep",
      "propertyName": "Retry sleep",
      "propertyType": "number",
      "regexp": "TODO cualquier cadena de caracteres",
      "default": "1000",
      "required": false,
      "tooltip": "The number of milliseconds to wait for reconnect with MongoDb nodes when the last client fails. It is recommendable to set less time to the slide interval of the streaming window."
    }
  ]
},
{
  "name": "Parquet",
  "modelType": "Parquet",
  "description": {
    "short": "Parquet's output uses the generic implementation with DataFrames, this implementation transform each UpdateMetricOperation to Row type of Spark and identify each row with his schema.",
    "long": "Parquet's output uses the generic implementation with DataFrames, this implementation transform each UpdateMetricOperation to Row type of Spark and identify each row with his schema.",
    "learnMore": "http://docs.stratio.com/modules/sparkta/0.6/outputs.html#parquet-label"
  },
  "icon": {
    "url": "logo_parquet.png"
  },
  "properties": [
    {
      "propertyId": "Path",
      "propertyName": "Path",
      "propertyType": "text",
      "regexp": "",
      "default": "",
      "required": true,
      "tooltip": ""
    }
  ]
},
{
  "name": "Print",
  "modelType": "Print",
  "description": {
    "short": "Print's output uses the generic implementation with DataFrames, this implementation print each dataframe with his schema.",
    "long": "Print's output uses the generic implementation with DataFrames, this implementation transform each UpdateMetricOperation to Row type of Spark and identify each row with his schema.",
    "learnMore": "http://docs.stratio.com/modules/sparkta/0.6/outputs.html#print-label"
  },
  "icon": {
    "url": "logo_print.png"
  }
},
{
  "name": "Redis",
  "modelType": "Redis",
  "description": {
    "short": "The output of ElasticSearch use the generic implementation with DataFrames, this implementation transform each UpdateMetricOperation to Row type of Spark and identify each row with his schema.",
    "long": "The output of ElasticSearch use the generic implementation with DataFrames, this implementation transform each UpdateMetricOperation to Row type of Spark and identify each row with his schema.",
    "learnMore": "http://docs.stratio.com/modules/sparkta/0.6/outputs.html#redis-label"
  },
  "icon": {
    "url": "logo_redis.png"
  },
  "properties": [
    {
      "propertyId": "hostname",
      "propertyName": "Hostname",
      "propertyType": "text",
      "regexp": "((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(((?![0-9]+$)(?!.*-$)(?!-)[a-zA-Z0-9-]{2,63}))",
      "default": "localhost",
      "required": true,
      "tooltip": "Hostname of the server"
    },
    {
      "propertyId": "port",
      "propertyName": "Port",
      "propertyType": "text",
      "regexp": "(0|([1-9]\\d{0,3}|[1-5]\\d{4}|[6][0-5][0-5]([0-2]\\d|[3][0-5])))",
      "default": "6379",
      "required": false,
      "tooltip": "Port of the server"
    }
  ]
}
]